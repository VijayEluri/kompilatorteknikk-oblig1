
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 25 15:37:39 CEST 2010
//----------------------------------------------------

package dflat.parser;

import dflat.syntaxtree.decl.ClassDecl;
import dflat.syntaxtree.decl.Decl;
import dflat.syntaxtree.decl.FuncDecl;
import dflat.syntaxtree.*;
import dflat.syntaxtree.decl.VarDecl;
import dflat.syntaxtree.expression.*;
import dflat.syntaxtree.expression.literal.*;
import dflat.syntaxtree.expression.op.*;
import dflat.syntaxtree.param.ActualParam;
import dflat.syntaxtree.param.Param;
import dflat.syntaxtree.param.PassByReferenceParam;
import dflat.syntaxtree.param.PassByValueParam;
import dflat.syntaxtree.statement.*;
import dflat.syntaxtree.type.*;

import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 25 15:37:39 CEST 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\012" +
    "\003\000\002\012\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\006\007\000\002\004\014\000" +
    "\002\013\003\000\002\013\002\000\002\015\003\000\002" +
    "\015\002\000\002\014\005\000\002\014\003\000\002\011" +
    "\005\000\002\011\004\000\002\010\004\000\002\010\002" +
    "\000\002\017\003\000\002\017\002\000\002\016\004\000" +
    "\002\016\003\000\002\005\006\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\020\004\000\002\020\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\003\000\002\022\004\000" +
    "\002\022\003\000\002\037\010\000\002\034\003\000\002" +
    "\034\004\000\002\036\010\000\002\036\014\000\002\021" +
    "\003\000\002\021\002\000\002\035\005\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\004\000" +
    "\002\023\003\000\002\023\006\000\002\023\003\000\002" +
    "\023\005\000\002\023\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\031\005\000\002\031\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\024\003\000\002\024" +
    "\005\000\002\030\006\000\002\030\005\000\002\027\005" +
    "\000\002\027\003\000\002\026\004\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\015\014\016\005\017\010\001\002\000" +
    "\046\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\022\ufffc\025\ufffc\030\ufffc\031" +
    "\ufffc\033\ufffc\036\ufffc\037\ufffc\050\ufffc\051\ufffc\001\002" +
    "\000\006\004\uffef\020\036\001\002\000\012\002\001\015" +
    "\014\016\005\017\010\001\002\000\004\002\034\001\002" +
    "\000\014\004\027\011\031\012\024\013\025\014\030\001" +
    "\002\000\046\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\015\ufffb\016\ufffb\017\ufffb\022\ufffb\025\ufffb\030" +
    "\ufffb\031\ufffb\033\ufffb\036\ufffb\037\ufffb\050\ufffb\051\ufffb" +
    "\001\002\000\046\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\015\uffff\016\uffff\017\uffff\022\uffff\025\uffff" +
    "\030\uffff\031\uffff\033\uffff\036\uffff\037\uffff\050\uffff\051" +
    "\uffff\001\002\000\046\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\015\ufffd\016\ufffd\017\ufffd\022\ufffd\025" +
    "\ufffd\030\ufffd\031\ufffd\033\ufffd\036\ufffd\037\ufffd\050\ufffd" +
    "\051\ufffd\001\002\000\004\004\015\001\002\000\004\034" +
    "\016\001\002\000\006\017\010\033\uffed\001\002\000\004" +
    "\033\023\001\002\000\006\017\010\033\uffee\001\002\000" +
    "\006\017\uffeb\033\uffeb\001\002\000\006\017\uffec\033\uffec" +
    "\001\002\000\046\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\015\ufffa\016\ufffa\017\ufffa\022\ufffa\025\ufffa" +
    "\030\ufffa\031\ufffa\033\ufffa\036\ufffa\037\ufffa\050\ufffa\051" +
    "\ufffa\001\002\000\006\004\uffe7\036\uffe7\001\002\000\006" +
    "\004\uffe6\036\uffe6\001\002\000\004\004\032\001\002\000" +
    "\006\004\uffe5\036\uffe5\001\002\000\006\004\uffe8\036\uffe8" +
    "\001\002\000\006\004\uffe9\036\uffe9\001\002\000\004\032" +
    "\033\001\002\000\046\002\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\015\uffea\016\uffea\017\uffea\022\uffea\025" +
    "\uffea\030\uffea\031\uffea\033\uffea\036\uffea\037\uffea\050\uffea" +
    "\051\uffea\001\002\000\004\002\000\001\002\000\046\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\022\ufffe\025\ufffe\030\ufffe\031\ufffe\033" +
    "\ufffe\036\ufffe\037\ufffe\050\ufffe\051\ufffe\001\002\000\014" +
    "\004\027\011\031\012\024\013\025\014\030\001\002\000" +
    "\004\004\040\001\002\000\004\036\041\001\002\000\020" +
    "\004\027\011\031\012\024\013\025\014\030\021\045\035" +
    "\ufff5\001\002\000\004\035\054\001\002\000\006\035\ufff3" +
    "\041\ufff3\001\002\000\004\004\053\001\002\000\014\004" +
    "\027\011\031\012\024\013\025\014\030\001\002\000\006" +
    "\035\ufff6\041\047\001\002\000\016\004\027\011\031\012" +
    "\024\013\025\014\030\021\045\001\002\000\006\035\ufff4" +
    "\041\ufff4\001\002\000\004\004\052\001\002\000\006\035" +
    "\ufff2\041\ufff2\001\002\000\006\035\ufff1\041\ufff1\001\002" +
    "\000\004\034\055\001\002\000\044\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\015\014\016\005\017\010\022\ufff7" +
    "\025\ufff7\030\ufff7\031\ufff7\033\ufff7\036\ufff7\037\ufff7\050" +
    "\ufff7\051\ufff7\001\002\000\036\004\064\005\071\006\102" +
    "\007\103\010\106\022\067\025\061\030\062\031\101\033" +
    "\uffd7\036\072\037\074\050\065\051\076\001\002\000\044" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\015\014\016" +
    "\005\017\010\022\ufff8\025\ufff8\030\ufff8\031\ufff8\033\ufff8" +
    "\036\ufff8\037\ufff8\050\ufff8\051\ufff8\001\002\000\036\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\022\uffde\025\uffde" +
    "\030\uffde\031\uffde\033\uffde\036\uffde\037\uffde\050\uffde\051" +
    "\uffde\001\002\000\026\004\064\005\071\006\102\007\103" +
    "\010\106\031\101\036\072\037\074\050\065\051\076\001" +
    "\002\000\030\004\064\005\071\006\102\007\103\010\106" +
    "\031\101\032\uffdc\036\072\037\074\050\065\051\076\001" +
    "\002\000\050\023\uffcd\026\uffcd\032\uffcd\035\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\001\002\000\054\023\uffbf\026\uffbf\027\uffbf\032" +
    "\uffbf\035\uffbf\036\172\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000\050" +
    "\023\uffb4\026\uffb4\032\uffb4\035\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001" +
    "\002\000\036\040\133\042\136\043\132\044\127\045\125" +
    "\046\130\047\134\052\121\053\137\054\131\055\122\056" +
    "\123\057\126\060\135\001\002\000\026\004\064\005\071" +
    "\006\102\007\103\010\106\031\101\036\072\037\074\050" +
    "\065\051\076\001\002\000\036\004\064\005\071\006\102" +
    "\007\103\010\106\022\067\025\061\030\062\031\101\033" +
    "\uffd8\036\072\037\074\050\065\051\076\001\002\000\050" +
    "\023\uffb6\026\uffb6\032\uffb6\035\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001" +
    "\002\000\026\004\064\005\071\006\102\007\103\010\106" +
    "\031\101\036\072\037\074\050\065\051\076\001\002\000" +
    "\004\032\155\001\002\000\026\004\064\005\071\006\102" +
    "\007\103\010\106\031\101\036\072\037\074\050\065\051" +
    "\076\001\002\000\050\023\uffcf\026\uffcf\032\uffcf\035\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\001\002\000\050\023\uffb3\026\uffb3\032" +
    "\uffb3\035\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002\000\050\023\uffd4" +
    "\026\uffd4\032\uffd4\035\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\001\002\000" +
    "\036\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\022\uffe0" +
    "\025\uffe0\030\uffe0\031\uffe0\033\uffe0\036\uffe0\037\uffe0\050" +
    "\uffe0\051\uffe0\001\002\000\014\004\027\011\031\012\024" +
    "\013\025\014\030\001\002\000\050\023\uffb7\026\uffb7\032" +
    "\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\001\002\000\050\023\uffb5" +
    "\026\uffb5\032\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000" +
    "\040\027\115\040\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\001\002\000\040\032\114\040\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\001\002\000\050\023\uffb2\026\uffb2\032\uffb2\035\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\001\002\000\004\033\113\001\002\000\036" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\022\uffe3\025" +
    "\uffe3\030\uffe3\031\uffe3\033\uffe3\036\uffe3\037\uffe3\050\uffe3" +
    "\051\uffe3\001\002\000\004\032\112\001\002\000\036\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\022\uffe1\025\uffe1" +
    "\030\uffe1\031\uffe1\033\uffe1\036\uffe1\037\uffe1\050\uffe1\051" +
    "\uffe1\001\002\000\046\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\015\ufff9\016\ufff9\017\ufff9\022\ufff9\025" +
    "\ufff9\030\ufff9\031\ufff9\033\ufff9\036\ufff9\037\ufff9\050\ufff9" +
    "\051\ufff9\001\002\000\036\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\022\uffdf\025\uffdf\030\uffdf\031\uffdf\033\uffdf" +
    "\036\uffdf\037\uffdf\050\uffdf\051\uffdf\001\002\000\026\004" +
    "\064\005\071\006\102\007\103\010\106\031\101\036\072" +
    "\037\074\050\065\051\076\001\002\000\050\023\uffd1\026" +
    "\uffd1\032\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002\000\040" +
    "\032\uffd6\040\133\042\136\043\132\044\127\045\125\046" +
    "\130\047\134\052\121\053\137\054\131\055\122\056\123" +
    "\057\126\060\135\001\002\000\050\023\uffd3\026\uffd3\032" +
    "\uffd3\035\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000\026\004\064" +
    "\005\071\006\102\007\103\010\106\031\101\036\072\037" +
    "\074\050\065\051\076\001\002\000\026\004\064\005\071" +
    "\006\102\007\103\010\106\031\101\036\072\037\074\050" +
    "\065\051\076\001\002\000\026\004\064\005\071\006\102" +
    "\007\103\010\106\031\101\036\072\037\074\050\065\051" +
    "\076\001\002\000\026\004\064\005\071\006\102\007\103" +
    "\010\106\031\101\036\072\037\074\050\065\051\076\001" +
    "\002\000\026\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\031\uffc2\036\uffc2\037\uffc2\050\uffc2\051\uffc2\001\002\000" +
    "\026\004\064\005\071\006\102\007\103\010\106\031\101" +
    "\036\072\037\074\050\065\051\076\001\002\000\026\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\031\uffc3\036\uffc3" +
    "\037\uffc3\050\uffc3\051\uffc3\001\002\000\026\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\031\uffc1\036\uffc1\037\uffc1" +
    "\050\uffc1\051\uffc1\001\002\000\026\004\064\005\071\006" +
    "\102\007\103\010\106\031\101\036\072\037\074\050\065" +
    "\051\076\001\002\000\026\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\031\uffc4\036\uffc4\037\uffc4\050\uffc4\051\uffc4" +
    "\001\002\000\004\004\142\001\002\000\026\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\031\uffc0\036\uffc0\037\uffc0" +
    "\050\uffc0\051\uffc0\001\002\000\026\004\064\005\071\006" +
    "\102\007\103\010\106\031\101\036\072\037\074\050\065" +
    "\051\076\001\002\000\026\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\031\uffc5\036\uffc5\037\uffc5\050\uffc5\051\uffc5" +
    "\001\002\000\026\004\064\005\071\006\102\007\103\010" +
    "\106\031\101\036\072\037\074\050\065\051\076\001\002" +
    "\000\050\023\uffc6\026\uffc6\032\uffc6\035\uffc6\040\133\041" +
    "\uffc6\042\136\043\132\044\127\045\125\046\130\047\134" +
    "\052\121\053\uffc6\054\131\055\122\056\123\057\126\060" +
    "\135\001\002\000\050\023\uffc8\026\uffc8\032\uffc8\035\uffc8" +
    "\040\133\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\135\001\002\000\052\023\uffbe\026\uffbe\027" +
    "\uffbe\032\uffbe\035\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\001\002\000\050" +
    "\023\uffcc\026\uffcc\032\uffcc\035\uffcc\040\133\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\123\057\126\060\135\001" +
    "\002\000\050\023\uffca\026\uffca\032\uffca\035\uffca\040\133" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca" +
    "\060\135\001\002\000\050\023\uffce\026\uffce\032\uffce\035" +
    "\uffce\040\133\041\uffce\042\136\043\132\044\127\045\125" +
    "\046\130\047\134\052\121\053\137\054\131\055\122\056" +
    "\123\057\126\060\135\001\002\000\050\023\uffc9\026\uffc9" +
    "\032\uffc9\035\uffc9\040\133\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\135\001\002\000\050\023" +
    "\uffcb\026\uffcb\032\uffcb\035\uffcb\040\133\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\123\057\126\060\135\001\002" +
    "\000\050\023\uffc7\026\uffc7\032\uffc7\035\uffc7\040\133\041" +
    "\uffc7\042\136\043\132\044\127\045\125\046\130\047\134" +
    "\052\uffc7\053\uffc7\054\131\055\122\056\123\057\126\060" +
    "\135\001\002\000\004\036\152\001\002\000\004\035\153" +
    "\001\002\000\050\023\uffd0\026\uffd0\032\uffd0\035\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\001\002\000\050\023\uffd2\026\uffd2\032\uffd2" +
    "\035\uffd2\040\133\041\uffd2\042\136\043\132\044\127\045" +
    "\125\046\130\047\134\052\uffd2\053\uffd2\054\131\055\122" +
    "\056\123\057\126\060\135\001\002\000\036\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\022\uffe2\025\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\036\uffe2\037\uffe2\050\uffe2\051\uffe2\001" +
    "\002\000\040\035\157\040\133\042\136\043\132\044\127" +
    "\045\125\046\130\047\134\052\121\053\137\054\131\055" +
    "\122\056\123\057\126\060\135\001\002\000\050\023\uffd5" +
    "\026\uffd5\032\uffd5\035\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\001\002\000" +
    "\036\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\022\uffe4" +
    "\025\uffe4\030\uffe4\031\uffe4\033\uffe4\036\uffe4\037\uffe4\050" +
    "\uffe4\051\uffe4\001\002\000\040\023\162\040\133\042\136" +
    "\043\132\044\127\045\125\046\130\047\134\052\121\053" +
    "\137\054\131\055\122\056\123\057\126\060\135\001\002" +
    "\000\004\034\163\001\002\000\036\004\064\005\071\006" +
    "\102\007\103\010\106\022\067\025\061\030\062\031\101" +
    "\033\uffd7\036\072\037\074\050\065\051\076\001\002\000" +
    "\004\033\165\001\002\000\040\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\022\uffda\024\166\025\uffda\030\uffda\031" +
    "\uffda\033\uffda\036\uffda\037\uffda\050\uffda\051\uffda\001\002" +
    "\000\004\034\167\001\002\000\036\004\064\005\071\006" +
    "\102\007\103\010\106\022\067\025\061\030\062\031\101" +
    "\033\uffd7\036\072\037\074\050\065\051\076\001\002\000" +
    "\004\033\171\001\002\000\036\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\022\uffd9\025\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\036\uffd9\037\uffd9\050\uffd9\051\uffd9\001\002\000\032" +
    "\004\064\005\071\006\102\007\103\010\106\021\175\031" +
    "\101\035\173\036\072\037\074\050\065\051\076\001\002" +
    "\000\050\023\uffbc\026\uffbc\032\uffbc\035\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\001\002\000\042\035\uffb8\040\133\041\uffb8\042\136" +
    "\043\132\044\127\045\125\046\130\047\134\052\121\053" +
    "\137\054\131\055\122\056\123\057\126\060\135\001\002" +
    "\000\026\004\064\005\071\006\102\007\103\010\106\031" +
    "\101\036\072\037\074\050\065\051\076\001\002\000\006" +
    "\035\uffba\041\uffba\001\002\000\006\035\201\041\200\001" +
    "\002\000\030\004\064\005\071\006\102\007\103\010\106" +
    "\021\175\031\101\036\072\037\074\050\065\051\076\001" +
    "\002\000\050\023\uffbd\026\uffbd\032\uffbd\035\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\001\002\000\006\035\uffbb\041\uffbb\001\002\000" +
    "\042\035\uffb9\040\uffd3\041\uffb9\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000\040\032\uffdb" +
    "\040\133\042\136\043\132\044\127\045\125\046\130\047" +
    "\134\052\121\053\137\054\131\055\122\056\123\057\126" +
    "\060\135\001\002\000\040\026\206\040\133\042\136\043" +
    "\132\044\127\045\125\046\130\047\134\052\121\053\137" +
    "\054\131\055\122\056\123\057\126\060\135\001\002\000" +
    "\004\034\207\001\002\000\036\004\064\005\071\006\102" +
    "\007\103\010\106\022\067\025\061\030\062\031\101\033" +
    "\uffd7\036\072\037\074\050\065\051\076\001\002\000\004" +
    "\033\211\001\002\000\036\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\022\uffdd\025\uffdd\030\uffdd\031\uffdd\033\uffdd" +
    "\036\uffdd\037\uffdd\050\uffdd\051\uffdd\001\002\000\004\004" +
    "\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\016\002\006\003\011\004\010\005\012\006" +
    "\003\012\005\001\001\000\002\001\001\000\004\010\036" +
    "\001\001\000\012\003\034\004\010\005\012\006\003\001" +
    "\001\000\002\001\001\000\004\007\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\020\016\017\017\016" +
    "\001\001\000\002\001\001\000\004\005\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\043\011\042\014\045\015\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\050\001\001\000\002\001\001\000\006\007\043\011" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\011\004\010\005\012\006\003\012\056\013\055\001\001" +
    "\000\034\020\067\021\106\022\107\023\065\024\103\025" +
    "\076\030\104\031\074\033\062\034\072\035\110\036\077" +
    "\037\057\001\001\000\012\003\034\004\010\005\012\006" +
    "\003\001\001\000\002\001\001\000\016\023\204\024\117" +
    "\025\076\030\115\031\074\033\062\001\001\000\016\023" +
    "\203\024\117\025\076\030\115\031\074\033\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\123\001\001\000\016\023\160\024\117\025\076" +
    "\030\115\031\074\033\062\001\001\000\030\022\157\023" +
    "\065\024\103\025\076\030\104\031\074\033\062\034\072" +
    "\035\110\036\077\037\057\001\001\000\002\001\001\000" +
    "\016\023\155\024\117\025\076\030\115\031\074\033\062" +
    "\001\001\000\002\001\001\000\016\023\153\024\117\025" +
    "\076\030\115\031\074\033\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\116\024\117\025\076\030\115\031\074\033\062\001\001" +
    "\000\002\001\001\000\004\032\123\001\001\000\002\001" +
    "\001\000\016\023\147\024\117\025\076\030\115\031\074" +
    "\033\062\001\001\000\016\023\146\024\117\025\076\030" +
    "\115\031\074\033\062\001\001\000\016\023\145\024\117" +
    "\025\076\030\115\031\074\033\062\001\001\000\016\023" +
    "\144\024\117\025\076\030\115\031\074\033\062\001\001" +
    "\000\002\001\001\000\016\023\143\024\117\025\076\030" +
    "\115\031\074\033\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\142\024\117\025\076\030\115\031" +
    "\074\033\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\140\024\117\025\076\030" +
    "\115\031\074\033\062\001\001\000\002\001\001\000\016" +
    "\023\137\024\117\025\076\030\115\031\074\033\062\001" +
    "\001\000\004\032\123\001\001\000\004\032\123\001\001" +
    "\000\002\001\001\000\004\032\123\001\001\000\004\032" +
    "\123\001\001\000\004\032\123\001\001\000\004\032\123" +
    "\001\001\000\004\032\123\001\001\000\004\032\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\123\001\001\000\002\001\001\000\004\032" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\123\001\001\000\002\001\001\000\034\020\067\021" +
    "\163\022\107\023\065\024\103\025\076\030\104\031\074" +
    "\033\062\034\072\035\110\036\077\037\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\020\067\021\167\022\107\023\065\024\103\025\076\030" +
    "\104\031\074\033\062\034\072\035\110\036\077\037\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\173\024\117\025\076\026\175\027\176\030\115\031\074" +
    "\033\062\001\001\000\002\001\001\000\004\032\123\001" +
    "\001\000\016\023\065\024\202\025\076\030\115\031\074" +
    "\033\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\173\024\117\025\076\026\201\030\115\031\074" +
    "\033\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\123\001\001\000\004\032\123" +
    "\001\001\000\002\001\001\000\034\020\067\021\207\022" +
    "\107\023\065\024\103\025\076\030\104\031\074\033\062" +
    "\034\072\035\110\036\077\037\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= NULL 
            {
              Literal RESULT =null;
		 RESULT = new NullLiteral();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = new BooleanLiteral(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = new BooleanLiteral(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= FLOAT_LITERAL 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= DEC_INT_LITERAL 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // actual_param ::= exp 
            {
              ActualParam RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PassByValueParam(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // actual_param ::= REF var 
            {
              ActualParam RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableExpression v = (VariableExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PassByReferenceParam(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // actual_param_list ::= actual_param 
            {
              List<ActualParam> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActualParam p = (ActualParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<ActualParam> pl = new LinkedList<ActualParam>();
					   pl.add(p);
					   RESULT = pl;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // actual_param_list ::= actual_param_list COMMA actual_param 
            {
              List<ActualParam> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ActualParam> pl = (List<ActualParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActualParam p = (ActualParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // call_stmt ::= NAME LPARENT RPARENT 
            {
              CallStatement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallStatement(new Name(name), new ArrayList<ActualParam>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // call_stmt ::= NAME LPARENT actual_param_list RPARENT 
            {
              CallStatement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ActualParam> pl = (List<ActualParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStatement(new Name(name), pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var ::= exp PERIOD NAME 
            {
              VariableExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVariableExpression(e, new Name(name));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var ::= NAME 
            {
              VariableExpression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableExpression(new Name(name)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rel_op ::= NOT_EQUAL 
            {
              RelOp RESULT =null;
		 RESULT = new NEQOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_op ::= EQUAL 
            {
              RelOp RESULT =null;
		 RESULT = new EQOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rel_op ::= GTE 
            {
              RelOp RESULT =null;
		 RESULT = new GTEOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rel_op ::= LTE 
            {
              RelOp RESULT =null;
		 RESULT = new LTEOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rel_op ::= GT 
            {
              RelOp RESULT =null;
		 RESULT = new GTOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rel_op ::= LT 
            {
              RelOp RESULT =null;
		 RESULT = new LTOp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // log_op_expression ::= exp OR exp 
            {
              LogOpExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrOpExpression(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // log_op_expression ::= exp AND exp 
            {
              LogOpExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndOpExpression(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_op_expression ::= exp EXPONENT exp 
            {
              AritOpExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AritOpExpression(e1, new ExponentOp(), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_op_expression ::= exp DIVIDE exp 
            {
              AritOpExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AritOpExpression(e1, new DivideOp(), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_op_expression ::= exp MULTIPLY exp 
            {
              AritOpExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AritOpExpression(e1, new MultiplyOp(), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_op_expression ::= exp MINUS exp 
            {
              AritOpExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AritOpExpression(e1, new MinusOp(), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arit_op_expression ::= exp PLUS exp 
            {
              AritOpExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AritOpExpression(e1, new PlusOp(), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= arit_op_expression 
            {
              Expression RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritOpExpression ao = (AritOpExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ao;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp rel_op exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelOp ro = (RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpression(e1, ro, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= log_op_expression 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogOpExpression op = (LogOpExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= NEW type LPARENT RPARENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewExpression(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= call_stmt 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStatement s = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= EXCLAM exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegatedExpression(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= var 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableExpression v = (VariableExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= LPARENT exp RPARENT 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assign_stmt ::= var ASSIGN exp 
            {
              AssignStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableExpression v = (VariableExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatement(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opt_stmt_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_stmt_list ::= stmt_list 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_stmt ::= IF exp THEN LBRACK opt_stmt_list RBRACK ELSE LBRACK opt_stmt_list RBRACK 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl2 = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStatement(e, sl, sl2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_stmt ::= IF exp THEN LBRACK opt_stmt_list RBRACK 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatement(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return_stmt ::= RETURN exp 
            {
              ReturnStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_stmt ::= RETURN 
            {
              ReturnStatement RESULT =null;
		 RESULT = new ReturnStatement(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // while_stmt ::= WHILE exp DO LBRACK opt_stmt_list RBRACK 
            {
              WhileStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileStatement(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement ws = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= call_stmt SEMI 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallStatement cs = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= if_stmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement is = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= assign_stmt SEMI 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStatement as = (AssignStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= return_stmt SEMI 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt_list ::= stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Statement> sl = new ArrayList<Statement>(); sl.add(s); RESULT = sl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt_list ::= stmt_list stmt 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= NAME 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClassType(new Name(name)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new IntegerType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_decl ::= VAR type NAME SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						System.out.println("new node");
						RESULT = new VarDecl(t, new Name(name)); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decl_list ::= var_decl 
            {
              List<VarDecl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl d = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<VarDecl> vdl = new LinkedList<VarDecl>(); vdl.add(d); RESULT = vdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_decl_list ::= var_decl_list var_decl 
            {
              List<VarDecl> RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<VarDecl> vdl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl d = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdl.add(d);RESULT = vdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // class_var_decl ::= 
            {
              List<VarDecl> RESULT =null;
		 RESULT = new ArrayList<VarDecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_var_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_var_decl ::= var_decl_list 
            {
              List<VarDecl> RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<VarDecl> vdl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_var_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // return_type ::= 
            {
              Type RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // return_type ::= RET type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type NAME 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(false, t, name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= REF type NAME 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(true, t, name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              List<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					List<Param> pl = new ArrayList<Param>();
					pl.add(p);
					RESULT = pl;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMMA param 
            {
              List<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Param> pl = (List<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_decl ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_decl ::= param_list 
            {
              List<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Param> pl = (List<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_decl_list ::= 
            {
              List<Decl> RESULT =null;
		 RESULT = new LinkedList<Decl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_decl_list ::= decl_list 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_decl ::= FUNC return_type NAME LPARENT param_decl RPARENT LBRACK func_decl_list opt_stmt_list RBRACK 
            {
              FuncDecl RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Type rt = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Param> pl = (List<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> fsl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncDecl(name, pl, rt, dl, fsl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= CLASS NAME LBRACK class_var_decl RBRACK 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<VarDecl> vdl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDecl(new Name(name), vdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= func_decl 
            {
              Decl RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDecl fd = (FuncDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= class_decl 
            {
              Decl RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= var_decl 
            {
              Decl RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl_list decl 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					dl.add(d);
					RESULT = dl;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					List<Decl> declist = new LinkedList<Decl>();
					declist.add(d);
					RESULT = declist;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decl_list 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Program(dl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


<!-- Build file for INF5110 Oblig -->
<project name="INF5110 Oblig" default="menu" basedir=".">
	<target name="menu" >
		<echo>Targets</echo>
		<echo>clean                		- Cleans up the project</echo>
		<echo>build                		- Build compiler</echo>
		<echo>run                  		- Run compiler</echo>
	</target>

	<!-- Path definitions -->
	<path id="path-cup">
		<pathelement location="./lib/java-cup-11a.jar"/>
		<pathelement location="./lib/JFlex.jar"/>
	</path>
	<path id="path-run">
		<path refid="path-cup"/>
		<pathelement location="build/classes" />
	</path>

	<!-- Task definitions -->
	<taskdef classname="JFlex.anttask.JFlexTask" name="jflex" classpathref="path-cup" />
	<taskdef classname="java_cup.anttask.CUPTask" name="cup" classpathref="path-cup"/>

	<!-- Target definitions -->
	<target name="init">
		<!-- Directories and files that exist. -->
		<property name="dir.base" value="${basedir}"/>
		<property name="dir.build" value="${dir.base}/build"/>
		<property name="dir.src-gen" value="${dir.base}/src-gen"/>
		<property name="dir.src-examples" value="${dir.base}/src-examples"/>
		<property name="dir.src" value="${dir.base}/src"/>
		<property name="dir.desc" value="${dir.base}/desc"/>

		<!-- Directories and files to be created. -->
		<property name="dir.classes" value="${dir.build}/classes"/>
	</target>

	<target name="clean" depends="init">
		<delete includeemptydirs="true">
			<fileset dir="${dir.build}" includes="**/*"/>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${dir.src-gen}" includes="**/*"/>
		</delete>
	</target>

	<target name="mkdir" depends="init">
		<mkdir dir="${dir.classes}"/>
	</target>

	<!-- Generate Java files using JFlex and CUP  -->
	<target name="generate" depends="mkdir">
		<jflex file="./grammars/dflat.lex" destdir="src-gen"/>
		<cup srcfile="./grammars/dflat.cup" destdir="src-gen" interface="true" expect="1"/>
	</target>
	
	<!-- Generate Java files using JFlex and CUP  -->
	<target name="generate-alt-grammar" depends="mkdir">
		<jflex file="./grammars/dflat.lex" destdir="src-gen"/>
		<cup srcfile="./grammars/dflat-entydig.cup" destdir="src-gen" interface="true" />
	</target>

	<!-- Compile Java Files and store in /build/classes directory  -->
	<target name="compile" depends="generate">
		<javac srcdir="${dir.src}" destdir="${dir.classes}" debug="true"
			includes="**/*.java" classpathref="path-cup" sourcepath="${dir.src-gen}"/>
		<javac srcdir="${dir.src-gen}" destdir="${dir.classes}" debug="true"
			includes="**/*.java" classpathref="path-cup" sourcepath="${dir.src}" />
	</target>

	<!-- Main target  -->
	<target name="build" depends="compile"/>

	<!-- Run the alt-grammar  -->
	<target name="run-alt-grammar" depends="init">
		<java classname="dflat.compiler.Compiler" classpathref="path-run">
			<arg value="code-examples/entydig.d"/>
			<arg value="code-examples/test.ast"/>
		</java>
	</target>
	
	<!-- Run the system  -->
	<target name="run" depends="init">
		<java classname="dflat.compiler.Compiler" classpathref="path-run">
			<arg value="code-examples/Canonical.d"/>
			<arg value="code-examples/Canonical.ast"/>
		</java>
	</target>


	<!-- Generic compile target. -->
	<target name="generic-compile" depends="">
		<javac srcdir="${dir.src-gen}" destdir="${dir.classes}" debug="true"
			includes="${package-name}/*.java" classpathref="path-cup"/>
	</target>
	<!-- Generic compile AST-nodes target. -->
	<target name="generic-compile-ast" depends="">
		<javac srcdir="${dir.src-examples}" destdir="${dir.classes}" debug="true"
			includes="**/*.java" classpathref="path-cup"/>
	</target>



    <!-- Compile test classes -->
    <target name="compile-test" depends="mkdir">
        <javac srcdir="${dir.src}" destdir="${dir.classes}" debug="true"
            includes="test/*.java" classpathref="path-cup" />
    </target>

    <!-- Run tests -->
    <target name="test" depends="compile-test">
        <java classname="test.Tester" classpathref="path-run" >
            <arg value="tests"/>
        </java>
    </target>

    <!-- Run compiler on example RunMe -->
    <target name="compile-runme" depends="init">
        <java classname="dflat.compiler.Compiler" classpathref="path-run">
            <arg value="code-examples/RunMe.d"/>
            <arg value="code-examples/RunMe.ast"/>
            <arg value="code-examples/RunMe.bin"/>
        </java>
    </target>

    <!-- List example RunMe -->
    <target name="list-runme" depends="init">
        <java classname="runtime.VirtualMachine" classpathref="path-run">
            <arg value="-l"/>
            <arg value="code-examples/RunMe.bin"/>
        </java>
    </target>

    <!-- Run vm on example RunMe -->
    <target name="run-runme" depends="init">
        <java classname="runtime.VirtualMachine" classpathref="path-run">
            <arg value="code-examples/RunMe.bin"/>
        </java>
    </target>


    <target name="compile-testfile" depends="init">
           <java classname="dflat.compiler.Compiler" classpathref="path-run">
               <arg value="code-examples/test.d"/>
               <arg value="code-examples/test.ast"/>
               <arg value="code-examples/test.bin"/>
           </java>
       </target>

       <!-- List example RunMe -->
       <target name="list-testfile" depends="init">
           <java classname="runtime.VirtualMachine" classpathref="path-run">
               <arg value="-l"/>
               <arg value="code-examples/test.bin"/>
           </java>
       </target>

       <!-- Run vm on example RunMe -->
       <target name="run-testfile" depends="init">
           <java classname="runtime.VirtualMachine" classpathref="path-run">
               <arg value="code-examples/test.bin"/>
           </java>
       </target>



</project>

Rapport oblig 2.

Design decisions.

Name-klassen var relativt dumt.

La til Type.canBeCastTo(otherType), selv om denne bare gjelder mellom int og float. Kan være nyttig ifb klasser, arv etc.


//i alle henseender innenfor kompilatoren vil en int være likeverdig en float.




isRef i Param.

Paramklassen tar for seg equals for alle subklasser. konsekvens av at metodesignatur ligger i name.
må støtte sammenlikning av formalparam og actualparam.
sjekking mot riktig signatur, ref eller ikke osv gjøres nå i signaturliste sin equals. altså java util.


ass-statement
@Override
   public void generateCode(CodeProcedure proc) {
       expression.generateCode(proc); //last value is on the stack

       int localVarNumber = proc.variableNumber(var.getName().toString());
       //Må finne ut om var er global eller lokal
       if(localVarNumber == -1) {
           int globalVarNumber = proc.globalVariableNumber(var.getName().toString());
           if(globalVarNumber == -1) {
               throw new RuntimeException("no such variable. Name:" + var.getName().toString());
           }
           proc.addInstruction(new STOREGLOBAL(globalVarNumber));
       } else {
           proc.addInstruction(new STORELOCAL(localVarNumber));
       }

   }
/////
library functions blir lagt inn i program. alt blir lagt inn hver gang, ingen sjekk etter hvor mange som blir brukt.


///getByteCodeType i tYpe klassen returnerer riktig type for bc-compilering. Klasser må slå opp sin egen type via codefile.

///////
Equals funksjonen i name.

//op generer sin egen kode.


////Symboltabell
StackBasert. beholder popper referansene når den gpr ut av scope.


private void insertBuiltInTypes() {
    insert(new Name("string"), new StringType());
    insert(new Name("int"), new IntegerType());
    insert(new Name("bool"), new BooleanType());
    insert(new Name("float"), new FloatType());
    insert(new Name("void"), new VoidType());
}
///////